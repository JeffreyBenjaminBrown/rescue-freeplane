* PITFALL: the freeplane format changed over time
In particular, the set of tags used might be different.
This code is based on freeplane 1.6.0,
which might be the newest.
* references (in order)
Next skip to ArrowTree.
** DONE tutorial
https://www.vex.net/~trebla/haskell/hxt-arrow/lesson-1.xhtml
** DONE Control.Category
** DONE Control.Arrow
** Control.Arrow.ArrowList
resume at listA
** Control.Arrow.ArrowIf
** Control.Arrow.ArrowTree
** Text.XML.HXT.Arrow.XmlArrow
* TODO ? remove unnecessary stars
** use arrow notation
https://stackoverflow.com/questions/59867382/haskell-arrows-on-trees-xml-and-hxt-transform-text-leaves-into-subtrees/59869915#59869915
https://downloads.haskell.org/~ghc/7.8.4/docs/html/users_guide/arrow-notation.html
** some code I wrote before I knew about that
  Control.Arrow.ArrowList.>. :: a b c -> ([c] -> d) -> a b d

  isBlankNode :: IOSArrow XmlTree XmlTree
  isBlankNode =
    isElem >>> hasName "node" >>>
    ( ifA ( getAttrValue "TEXT"
            >>> arrL (\case "" -> []; _ -> [()]) )
      returnA none )
* PITFALL: read (in Hxt) mangles the data a little by default
Character references, entity references, and CDATA nodes are converted and merged into text nodes. Comments and the DTD are discarded. These features can be turned off by certain options of readDocument or in some cases by calling some other read/parse functions instead.
* about the data format
** navigate the tree
with getChildren and filters
** "elements"
are things between <>, e.g. "<head>" is an element.
Filter for them with "isElem".
** the "name" of an element
In the tutorial sample data,
it's whatever comes between the <> symbols,
but they are always single words.
I suspect the name is only the first of those words.
Filter for it with "hasName".
** "text"
is outside of angle brackets.
It matters in the .mm data because of the "richcontent" elements.
